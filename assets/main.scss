@use "sass:math";

@mixin letter-spacing($spacing) {
  letter-spacing: math.div($spacing,1000) * 1em;
}



/*================ Media Query Mixin ================*/
@mixin mq($mq) {
  $breakpoint-found: false;

  @each $breakpoint in $grid-breakpoints {
    $name: nth($breakpoint, 1);
    $declaration: nth($breakpoint, 2);

    @if $mq==$name and $declaration {
      $breakpoint-found: true;

      @media only screen and #{$declaration} {
        @content;
      }
    }
  }

  @if $breakpoint-found==false {
    @warn 'Breakpoint "#{$mq}" does not exist';
  }
}

/*================ Responsive Show/Hide Helper ================*/
@mixin responsive-display-helper($grid-breakpoint-type: '') {

  // sass-lint:disable no-important
  .#{$grid-breakpoint-type}show {
    display: block !important;
  }

  .#{$grid-breakpoint-type}hide {
    display: none !important;
  }
}


/*================ Responsive Text Alignment Helper ================*/
@mixin responsive-text-align-helper($grid-breakpoint-type: '') {

  // sass-lint:disable no-important
  .#{$grid-breakpoint-type}text-left {
    text-align: left !important;
  }

  .#{$grid-breakpoint-type}text-right {
    text-align: right !important;
  }

  .#{$grid-breakpoint-type}text-center {
    text-align: center !important;
  }
}

@mixin clearfix() {
  &::after {
    content: '';
    display: table;
    clear: both;
  }

  // sass-lint:disable no-misspelled-properties
  *zoom: 1;
}


/*============================================================================
    Grid Breakpoints and Class Names
        - Do not change the variable names
        - $grid-narrow is based on a Shopify breakpoint for checkout buttons
==============================================================================*/
$grid-narrow: 500px;
$grid-medium: 750px;
$grid-large: 990px;
$grid-ex-large:1200px;
$grid-widescreen: 1400px;
$grid-gutter: 30px;
$grid-gutter-mobile: 22px;

$narrow: 'narrow';
$not-narrow: 'not-narrow';
$small: 'small';
$medium: 'medium';
$medium-down: 'medium-down';
$medium-up: 'medium-up';
$large: 'large';
$large-down: 'large-down';
$large-up: 'large-up';
$ex-large: 'ex-large';
$ex-large-up: 'ex-large-up';
$widescreen: 'widescreen';

/*============================================================================
    Generate breakpoint-specific column widths and push classes
        - Default column widths: $grid-breakpoint-has-widths: ($small, $medium-up);
        - Default is no push classes
==============================================================================*/
$grid-breakpoint-has-widths: ($narrow, $not-narrow, $small, $medium-up, $medium, $medium-down, $large, $large-up, $large-down, $ex-large, $ex-large-up);
$grid-breakpoint-has-push: $grid-breakpoint-has-widths;



/*============================================================================
    #Grid
==============================================================================*/

// The `$grid-breakpoints` list is used to build our media queries.
// You can use these in the mq mixin.
$grid-breakpoints: (
  $narrow '(max-width: #{$grid-narrow})',
  $not-narrow '(min-width: #{$grid-narrow + 1}) and (max-width: #{$grid-medium - 1})',
  $small '(max-width: #{$grid-medium - 1})',
  $medium '(min-width: #{$grid-medium}) and (max-width: #{$grid-large - 1})',
  $medium-down '(max-width: #{$grid-large - 1})',
  $medium-up '(min-width: #{$grid-medium})',
  $large '(min-width: #{$grid-large}) and (max-width: #{$grid-ex-large - 1})',
  $large-down '(max-width: #{$grid-ex-large - 1})',
  $large-up '(min-width: #{$grid-large})',
  $ex-large '(min-width: #{$grid-ex-large}) and (max-width: #{$grid-widescreen - 1})',
  $ex-large-up '(min-width: #{$grid-ex-large})',
  $widescreen '(min-width: #{$grid-widescreen})'
);


/*============================================================================
    Grid Setup
        1. Allow the grid system to be used on lists.
        2. Remove any margins and paddings that might affect the grid system.
        3. Apply a negative `margin-left` to negate the columns' gutters.
==============================================================================*/


// Gives access to whole site
:root {
  
}


.grid {
  

  @include clearfix();
  list-style: none;
  margin: 0;
  padding: 0;
  margin-left: var(--grid-gutter--neg);
  font-size: 0;

  @include mq($small) {
    --grid-gutter: var(--grid-gutter--mobile);
  }

  &>.grid__item {
    padding-left: var(--grid-gutter);
    display: inline-block;
    font-size: 16px;

    &[class*="--push"] {
      position: relative;
    }
  }

}

.grid.no_gutter,
.grid_no_gutter {
  @include clearfix();
  list-style: none;
  margin: 0;
  padding: 0;
  font-size: 0;

  &>.grid__item {
    display: inline-block;
    font-size: 16px;
  }
}

.grid__item {
  width: 100%;
  // float: initial;
  display: inline-block;
  font-size: 16px;

  &[class*="--push"] {
    position: relative;
  }
}

.grid,
.grid_no_gutter {
  .grid__item {
    vertical-align: top;
  }

  &.vert-top {
    &>.grid__item {
      vertical-align: top;
    }
  }

  &.vert-mid,
  &.vert-middle {
    &>.grid__item {
      vertical-align: middle;
    }
  }

  &.vert-bot,
  &.vert-bottom {
    &>.grid__item {
      vertical-align: bottom;
    }
  }

  &.half_gutter {
    --grid-gutter: var(--base-gutter--half);
  }

  &.double_gutter {
    --grid-gutter: var(--base-gutter--double);
  }

  &.grid_margin_bottom,
  &.grid_bottom_margin {
    margin-bottom: var(--grid-gutter--neg);

    &>.grid__item {
      margin-bottom: var(--grid-gutter);
    }

    &.double_gutter_bottom {
      --grid-gutter--bottom: var(--base-gutter--double);
      --grid-gutter--bottom-neg: calc(var(--grid-gutter--bottom) * -1);
      margin-bottom: var(--grid-gutter--bottom-neg);
      &>.grid__item {
        margin-bottom: var(--grid-gutter--bottom);
      }
      @include mq($small) {
        --grid-gutter--bottom: var(--base-gutter);
      }
    }

  }
}

/*============================================================================
    Reversed grids allow you to structure your source in the opposite
    order to how your rendered layout will appear.
==============================================================================*/
.grid--rev {
  direction: rtl;
  text-align: left;

  >.grid__item {
    direction: ltr;
    text-align: left;
    float: right;
  }
}

.page-width {
  

  width: 100%;
  max-width: $grid-widescreen;
  margin: 0 auto;

  &.with-padding {
    padding: 0 var(--grid-gutter--mobile);

    @include mq($medium-up) {
      padding: 0 var(--grid-gutter);
    }
  }
}


/*============================================================================
    Grid Columns
        - Create width classes, prepended by the breakpoint name.
==============================================================================*/
// sass-lint:disable brace-style empty-line-between-blocks
@mixin grid-column-generator($grid-breakpoint-type: '') {

  /* Whole */
  .#{$grid-breakpoint-type}one-whole {
    width: 100%;
  }

  /* Halves */
  .#{$grid-breakpoint-type}one-half {
    width: percentage(math.div(1, 2));
  }

  /* Thirds */
  .#{$grid-breakpoint-type}one-third {
    width: percentage(math.div(1, 3));
  }

  .#{$grid-breakpoint-type}two-thirds {
    width: percentage(math.div(2, 3));
  }

  /* Quarters */
  .#{$grid-breakpoint-type}one-quarter {
    width: percentage(math.div(1, 4));
  }

  .#{$grid-breakpoint-type}two-quarters {
    width: percentage(math.div(2, 4));
  }

  .#{$grid-breakpoint-type}three-quarters {
    width: percentage(math.div(3, 4));
  }

  /* Fifths */
  .#{$grid-breakpoint-type}one-fifth {
    width: percentage(math.div(1, 5));
  }

  .#{$grid-breakpoint-type}two-fifths {
    width: percentage(math.div(2, 5));
  }

  .#{$grid-breakpoint-type}three-fifths {
    width: percentage(math.div(3, 5));
  }

  .#{$grid-breakpoint-type}four-fifths {
    width: percentage(math.div(4, 5));
  }

  /* Sixths */
  .#{$grid-breakpoint-type}one-sixth {
    width: percentage(math.div(1, 6));
  }

  .#{$grid-breakpoint-type}two-sixths {
    width: percentage(math.div(2, 6));
  }

  .#{$grid-breakpoint-type}three-sixths {
    width: percentage(math.div(3, 6));
  }

  .#{$grid-breakpoint-type}four-sixths {
    width: percentage(math.div(4, 6));
  }

  .#{$grid-breakpoint-type}five-sixths {
    width: percentage(math.div(5, 6));
  }

  /* Sevenths */
  .#{$grid-breakpoint-type}one-seventh {
    width: percentage(math.div(1, 7));
  }

  .#{$grid-breakpoint-type}two-sevenths {
    width: percentage(math.div(2, 7));
  }

  .#{$grid-breakpoint-type}three-sevenths {
    width: percentage(math.div(3, 7));
  }

  .#{$grid-breakpoint-type}four-sevenths {
    width: percentage(math.div(4, 7));
  }

  .#{$grid-breakpoint-type}five-sevenths {
    width: percentage(math.div(5, 7));
  }

  .#{$grid-breakpoint-type}five-sevenths {
    width: percentage(math.div(6, 7));
  }

  /* Eighths */
  .#{$grid-breakpoint-type}one-eighth {
    width: percentage(math.div(1, 8));
  }

  .#{$grid-breakpoint-type}two-eighths {
    width: percentage(math.div(2, 8));
  }

  .#{$grid-breakpoint-type}three-eighths {
    width: percentage(math.div(3, 8));
  }

  .#{$grid-breakpoint-type}four-eighths {
    width: percentage(math.div(4, 8));
  }

  .#{$grid-breakpoint-type}five-eighths {
    width: percentage(math.div(5, 8));
  }

  .#{$grid-breakpoint-type}six-eighths {
    width: percentage(math.div(6, 8));
  }

  .#{$grid-breakpoint-type}seven-eighths {
    width: percentage(math.div(7, 8));
  }

  /* Ninths */
  .#{$grid-breakpoint-type}one-ninth {
    width: percentage(math.div(1, 9));
  }

  .#{$grid-breakpoint-type}two-ninths {
    width: percentage(math.div(2, 9));
  }

  .#{$grid-breakpoint-type}three-ninths {
    width: percentage(math.div(3, 9));
  }

  .#{$grid-breakpoint-type}four-ninths {
    width: percentage(math.div(4, 9));
  }

  .#{$grid-breakpoint-type}five-ninths {
    width: percentage(math.div(5, 9));
  }

  .#{$grid-breakpoint-type}six-ninths {
    width: percentage(math.div(6, 9));
  }

  .#{$grid-breakpoint-type}seven-ninths {
    width: percentage(math.div(7, 9));
  }

  .#{$grid-breakpoint-type}seven-ninths {
    width: percentage(math.div(8, 9));
  }

  /* Tenths */
  .#{$grid-breakpoint-type}one-tenth {
    width: percentage(math.div(1, 10));
  }

  .#{$grid-breakpoint-type}two-tenths {
    width: percentage(math.div(2, 10));
  }

  .#{$grid-breakpoint-type}three-tenths {
    width: percentage(math.div(3, 10));
  }

  .#{$grid-breakpoint-type}four-tenths {
    width: percentage(math.div(4, 10));
  }

  .#{$grid-breakpoint-type}five-tenths {
    width: percentage(math.div(5, 10));
  }

  .#{$grid-breakpoint-type}six-tenths {
    width: percentage(math.div(6, 10));
  }

  .#{$grid-breakpoint-type}seven-tenths {
    width: percentage(math.div(7, 10));
  }

  .#{$grid-breakpoint-type}eight-tenths {
    width: percentage(math.div(8, 10));
  }

  .#{$grid-breakpoint-type}nine-tenths {
    width: percentage(math.div(9, 10));
  }

  /* Elevenths */
  .#{$grid-breakpoint-type}one-eleventh {
    width: percentage(math.div(1, 11));
  }

  .#{$grid-breakpoint-type}two-elevenths {
    width: percentage(math.div(2, 11));
  }

  .#{$grid-breakpoint-type}three-elevenths {
    width: percentage(math.div(3, 11));
  }

  .#{$grid-breakpoint-type}four-elevenths {
    width: percentage(math.div(4, 11));
  }

  .#{$grid-breakpoint-type}five-elevenths {
    width: percentage(math.div(5, 11));
  }

  .#{$grid-breakpoint-type}six-elevenths {
    width: percentage(math.div(6, 11));
  }

  .#{$grid-breakpoint-type}seven-elevenths {
    width: percentage(math.div(7, 11));
  }

  .#{$grid-breakpoint-type}eight-elevenths {
    width: percentage(math.div(8, 11));
  }

  .#{$grid-breakpoint-type}nine-elevenths {
    width: percentage(math.div(9, 11));
  }

  .#{$grid-breakpoint-type}nine-elevenths {
    width: percentage(math.div(10, 11));
  }

  /* Twelfths */
  .#{$grid-breakpoint-type}one-twelfth {
    width: percentage(math.div(1, 12));
  }

  .#{$grid-breakpoint-type}two-twelfths {
    width: percentage(math.div(2, 12));
  }

  .#{$grid-breakpoint-type}three-twelfths {
    width: percentage(math.div(3, 12));
  }

  .#{$grid-breakpoint-type}four-twelfths {
    width: percentage(math.div(4, 12));
  }

  .#{$grid-breakpoint-type}five-twelfths {
    width: percentage(math.div(5, 12));
  }

  .#{$grid-breakpoint-type}six-twelfths {
    width: percentage(math.div(6, 12));
  }

  .#{$grid-breakpoint-type}seven-twelfths {
    width: percentage(math.div(7, 12));
  }

  .#{$grid-breakpoint-type}eight-twelfths {
    width: percentage(math.div(8, 12));
  }

  .#{$grid-breakpoint-type}nine-twelfths {
    width: percentage(math.div(9, 12));
  }

  .#{$grid-breakpoint-type}ten-twelfths {
    width: percentage(math.div(10, 12));
  }

  .#{$grid-breakpoint-type}eleven-twelfths {
    width: percentage(math.div(11, 12));
  }
}

/*================ Grid push classes ================*/
@mixin grid-push-generator($grid-breakpoint-type: '') {

  /* Halves */
  .#{$grid-breakpoint-type}push-one-half {
    left: percentage(math.div(1, 2));
  }

  /* Thirds */
  .#{$grid-breakpoint-type}push-one-third {
    left: percentage(math.div(1, 3));
  }

  .#{$grid-breakpoint-type}push-two-thirds {
    left: percentage(math.div(2, 3));
  }

  /* Quarters */
  .#{$grid-breakpoint-type}push-one-quarter {
    left: percentage(math.div(1, 4));
  }

  .#{$grid-breakpoint-type}push-two-quarters {
    left: percentage(math.div(2, 4));
  }

  .#{$grid-breakpoint-type}push-three-quarters {
    left: percentage(math.div(3, 4));
  }

  /* Fifths */
  .#{$grid-breakpoint-type}push-one-fifth {
    left: percentage(math.div(1, 5));
  }

  .#{$grid-breakpoint-type}push-two-fifths {
    left: percentage(math.div(2, 5));
  }

  .#{$grid-breakpoint-type}push-three-fifths {
    left: percentage(math.div(3, 5));
  }

  .#{$grid-breakpoint-type}push-four-fifths {
    left: percentage(math.div(4, 5));
  }

  /* Sixths */
  .#{$grid-breakpoint-type}push-one-sixth {
    left: percentage(math.div(1, 6));
  }

  .#{$grid-breakpoint-type}push-two-sixths {
    left: percentage(math.div(2, 6));
  }

  .#{$grid-breakpoint-type}push-three-sixths {
    left: percentage(math.div(3, 6));
  }

  .#{$grid-breakpoint-type}push-four-sixths {
    left: percentage(math.div(4, 6));
  }

  .#{$grid-breakpoint-type}push-five-sixths {
    left: percentage(math.div(5, 6));
  }

  /* Eighths */
  .#{$grid-breakpoint-type}push-one-eighth {
    left: percentage(math.div(1, 8));
  }

  .#{$grid-breakpoint-type}push-two-eighths {
    left: percentage(math.div(2, 8));
  }

  .#{$grid-breakpoint-type}push-three-eighths {
    left: percentage(math.div(3, 8));
  }

  .#{$grid-breakpoint-type}push-four-eighths {
    left: percentage(math.div(4, 8));
  }

  .#{$grid-breakpoint-type}push-five-eighths {
    left: percentage(math.div(5, 8));
  }

  .#{$grid-breakpoint-type}push-six-eighths {
    left: percentage(math.div(6, 8));
  }

  .#{$grid-breakpoint-type}push-seven-eighths {
    left: percentage(math.div(7, 8));
  }

  /* Tenths */
  .#{$grid-breakpoint-type}push-one-tenth {
    left: percentage(math.div(1, 10));
  }

  .#{$grid-breakpoint-type}push-two-tenths {
    left: percentage(math.div(2, 10));
  }

  .#{$grid-breakpoint-type}push-three-tenths {
    left: percentage(math.div(3, 10));
  }

  .#{$grid-breakpoint-type}push-four-tenths {
    left: percentage(math.div(4, 10));
  }

  .#{$grid-breakpoint-type}push-five-tenths {
    left: percentage(math.div(5, 10));
  }

  .#{$grid-breakpoint-type}push-six-tenths {
    left: percentage(math.div(6, 10));
  }

  .#{$grid-breakpoint-type}push-seven-tenths {
    left: percentage(math.div(7, 10));
  }

  .#{$grid-breakpoint-type}push-eight-tenths {
    left: percentage(math.div(8, 10));
  }

  .#{$grid-breakpoint-type}push-nine-tenths {
    left: percentage(math.div(9, 10));
  }

  /* Twelfths */
  .#{$grid-breakpoint-type}push-one-twelfth {
    left: percentage(math.div(1, 12));
  }

  .#{$grid-breakpoint-type}push-two-twelfths {
    left: percentage(math.div(2, 12));
  }

  .#{$grid-breakpoint-type}push-three-twelfths {
    left: percentage(math.div(3, 12));
  }

  .#{$grid-breakpoint-type}push-four-twelfths {
    left: percentage(math.div(4, 12));
  }

  .#{$grid-breakpoint-type}push-five-twelfths {
    left: percentage(math.div(5, 12));
  }

  .#{$grid-breakpoint-type}push-six-twelfths {
    left: percentage(math.div(6, 12));
  }

  .#{$grid-breakpoint-type}push-seven-twelfths {
    left: percentage(math.div(7, 12));
  }

  .#{$grid-breakpoint-type}push-eight-twelfths {
    left: percentage(math.div(8, 12));
  }

  .#{$grid-breakpoint-type}push-nine-twelfths {
    left: percentage(math.div(9, 12));
  }

  .#{$grid-breakpoint-type}push-ten-twelfths {
    left: percentage(math.div(10, 12));
  }

  .#{$grid-breakpoint-type}push-eleven-twelfths {
    left: percentage(math.div(11, 12));
  }
}

/*================ Clearfix helper on uniform grids ================*/
@mixin grid-uniform-clearfix($grid-breakpoint-type: '') {
  .grid--uniform {

    .#{$grid-breakpoint-type}one-half:nth-child(2n+1),
    .#{$grid-breakpoint-type}one-third:nth-child(3n+1),
    .#{$grid-breakpoint-type}one-quarter:nth-child(4n+1),
    .#{$grid-breakpoint-type}one-fifth:nth-child(5n+1),
    .#{$grid-breakpoint-type}one-sixth:nth-child(6n+1),
    .#{$grid-breakpoint-type}two-sixths:nth-child(3n+1),
    .#{$grid-breakpoint-type}three-sixths:nth-child(2n+1),
    .#{$grid-breakpoint-type}one-eighth:nth-child(8n+1),
    .#{$grid-breakpoint-type}two-eighths:nth-child(4n+1),
    .#{$grid-breakpoint-type}four-eighths:nth-child(2n+1),
    .#{$grid-breakpoint-type}five-tenths:nth-child(2n+1),
    .#{$grid-breakpoint-type}one-twelfth:nth-child(12n+1),
    .#{$grid-breakpoint-type}two-twelfths:nth-child(6n+1),
    .#{$grid-breakpoint-type}three-twelfths:nth-child(4n+1),
    .#{$grid-breakpoint-type}four-twelfths:nth-child(3n+1),
    .#{$grid-breakpoint-type}six-twelfths:nth-child(2n+1) {
      clear: both;
    }
  }
}

// sass-lint:enable brace-style empty-line-between-blocks

/*================ Build Base Grid Classes ================*/
@include grid-column-generator();
@include responsive-display-helper();
@include responsive-text-align-helper();

/*================ Build Responsive Grid Classes ================*/
@each $breakpoint in $grid-breakpoint-has-widths {
  @include mq($breakpoint) {
    @include grid-column-generator('#{$breakpoint}--');
    @include grid-uniform-clearfix('#{$breakpoint}--');
    @include responsive-display-helper('#{$breakpoint}--');
    @include responsive-text-align-helper('#{$breakpoint}--');
  }
}

/*================ Build Grid Push Classes ================*/
@each $breakpoint in $grid-breakpoint-has-push {
  @include mq($breakpoint) {
    @include grid-push-generator('#{$breakpoint}--');
  }
}




// Site Defaults

*,
*::after,
*::before { 
  box-sizing:border-box
}


.visually-hidden {
  position: absolute !important;
  height: 1px;
  width: 1px;
  overflow: hidden;
  clip: rect(1px 1px 1px 1px);
  /* IE6, IE7 */
  clip: rect(1px, 1px, 1px, 1px);
  white-space: nowrap;
  /* added line */
}

body {
  background-color: var(--color--site-background);
  color: var(--color--site-text);
  font: {
    size: var(--font--base-size);
    family: var(--font--site-stack);
    weight: 400;
  }
}


// Headings
$headings--number: 6;
$headings--font-size: 16px;
$headings--scale: 7; // amount of px headings grow from h6 to h1
@for $i from 1 through $headings--number {
  h#{$i},
  .h#{$i} {
    margin: 0 0 var(--base-gutter--half);
    font-family: var(--font--header-stack);
    font-style: normal;
    font-weight: 600;
    line-height: 1.1;
    overflow-wrap: break-word;
    word-wrap: break-word;
    font-size: $headings--font-size + $headings--scale * (6 - $i);

    a {
      color: inherit;
      text-decoration: none;
      font-weight: inherit;
    }

    .rte & {
      margin-bottom: var(--base-gutter);
      &:not(:first-child) {
        margin-top: var(--base-gutter--double);
      }
    }
  }
}

.rte {
  color: var(--color--site-text);
  margin-bottom: var(--base-gutter);
}

.rte:last-child {
  margin-bottom: 0;
}

a {
  color: inherit;
  font-family: inherit;
  text-decoration: none;
  opacity: 1;
  &:hover,
  &:active,
  &:visited {
    opacity: 0.7;
  }
}


.bg_image {
  background:{
    repeat: no-repeat !important;
    size: cover !important;
    position: center !important;
  };
}



.btn {
  padding: 15px 30px;
  background-color: var(--color--btn--bg);
  border: 2px solid var(--color--btn--bdr);
  color: var(--color--btn--txt);
  min-width: 250px;
  display: inline-block;
  transition: 
    color var(--transition--button),
    border-color var(--transition--button),
    background-color var(--transition--button);
  font: {
    weight: 500;
    size: 20px;
  }
  text: {
    align: center;
    transform: uppercase;
  }
  &:hover, 
  &:focus {
    background-color: var(--color--btn-hov--bg);
    border-color: var(--color--btn-hov--bdr);
    color: var(--color--btn-hov--txt);
  }
}



.match-row.grid,
.match-row.grid_no_gutter {
    display: grid;
    grid-template-columns: repeat(2, 1fr);
    // grid-template-columns: 50% 50%;

    --grid_margin          : 15px;
    --grid_margin_neg      : calc( (var(--grid_margin)) * -1 );

    > .grid__item {
        width: 100%;
        grid-column-end: span 1;
        > div {
            height: 100%;
        }
    }
    &.grid {
        margin-bottom: var(--grid_margin_neg);
        margin-left: var(--grid_margin_neg);
        > .grid__item {
            padding-left: var(--grid_margin); 
            margin-bottom: var(--grid_margin);
        }
    }
    .product-grid-item {
        .product-form,
        .btn {
            margin-top: auto;
        }
    }
    @include mq($narrow) {
        > .grid__item {
            grid-column-end: span 2;
        }
    }


    @include mq($small) {
        > .collection-cta-item {
            grid-column-end: span 2;
        }
    }
    @include mq($medium-up) {
        grid-template-columns: repeat(60, 1fr); // 60 for columns bc it's evenly dividable by 2, 3, 4, and 5
        > .medium--one-half,
        > .medium-up--one-half {
            grid-column-end: span 30;
        }
        > .medium--one-third,
        > .medium-up--one-third {
            grid-column-end: span 20;
        }
        > .medium--two-thirds,
        > .medium-up--two-thirds {
            grid-column-end: span 40;
        }
        > .medium--one-quarter,
        > .medium-up--one-quarter {
            grid-column-end: span 15;
        }
        > .medium--one-fifth,
        > .medium-up--one-fifth {
            grid-column-end: span 12;
        }
        > .medium--two-fifths,
        > .medium-up--two-fifths {
            grid-column-end: span 24;
        }
    }
    @include mq($large-up) {
        > .large--one-half,
        > .large-up--one-half {
            grid-column-end: span 30;
        }
        > .large--one-third,
        > .large-up--one-third {
            grid-column-end: span 20;
        }
        > .large--two-thirds,
        > .large-up--two-thirds {
            grid-column-end: span 40;
        }
        > .large--one-quarter,
        > .large-up--one-quarter {
            grid-column-end: span 15;
        }
        > .large--one-fifth,
        > .large-up--one-fifth {
            grid-column-end: span 12;
        }
        > .large--two-fifths,
        > .large-up--two-fifths {
            grid-column-end: span 24;
        }
    }
}



// remove header clear
.page--homepage {
  .header-clear {
    display: none;
  }
}






// Sections

.site-header {
  padding: var(--base-gutter--half) 0;
  position:fixed;
  top: 0;
  left: 0;
  width: 100%;
  z-index: 99999;
  background-color: rgba(var(--color--header-background),0);
  border-bottom: 1px solid transparent;
  transition: 
    border-color var(--transition--header),
    background-color var(--transition--header);

  &.is-scrolled,
  &:focus-within,
  &:hover {
    background-color: rgba(var(--color--header-background),1);
    border-bottom-color: rgba(white,0.25);
  }

  .page-width {
    max-width: 100%;
    // padding: 0 var(--base-gutter--quarter);
    @include mq($medium-up) {
      // padding: 0 var(--base-gutter--half);
    }
  }


  &--container {
    display: flex;
    flex-wrap: wrap;
    justify-content: space-between;
    align-items: center;
  }



  &--nav {
    --nav-trans--timing     : .35s;
    --nav-trans--delay-amt  : 0.4;
    --nav-trans--delay      : calc(var(--nav-trans--timing) * var(--nav-trans--delay-amt));
    input[type="checkbox"] {
      display: none;
    }
    &__menu-btn {
      display: block;
      cursor: pointer;
      position: relative;
      height: 40px;
      width: 54px;
      appearance: none;
      padding: 0;
      margin: 0;
      z-index: 9;
      background-color: transparent;

      span:not(.visually-hidden) {
        position: absolute;
        top: 50%;
        left: 0%;
        transform: translateY(-50%) rotate(0deg);
        opacity: 1;
        background: white;
        width: 100%;
        height: 8px;
        transition: all var(--transition--header);

        &:nth-of-type(1) {
          top: 0;
          transform: translateY(0%) rotate(0deg);
        }
         &:nth-of-type(3) {
          top: 100%;
          transform: translateY(-100%) rotate(0deg);
        }
      }

      input:checked+&,
      &.menu-is-open {
        span:not(.visually-hidden) {
          top: 50%;
          
          transition: opacity var(--nav-trans--timing) ease-in-out,
                      top var(--nav-trans--timing) ease-in-out,
                      transform var(--nav-trans--timing) var(--nav-trans--delay) ease-in-out;

          &:nth-of-type(2) {
            opacity: 0;
          }
          &:nth-of-type(1) {
            transform: translateY(-50%) rotate(-45deg);
          }
           &:nth-of-type(3) {
            transform: translateY(-50%) rotate(45deg);
          }
        }
      }
    }

    &__drawer {
      --nav-trans--timing     : .75s;
      --nav-trans--delay-amt  : 0.4;
      position: absolute;
      top: 0;
      right:-100%;
      width: 100vw;
      max-width: 400px;
      min-height: 100vh;
      transition: right var(--nav-trans--timing) var(--nav-trans--delay) ease-in-out;
      padding: calc(var(--header-height,50px) + var(--base-gutter)) var(--base-gutter) var(--base-gutter--double);
      background: rgba(var(--color--header-background),0.95);
      box-shadow: 0px 3px 15px rgba(var(--color--header-background), 0.75);

      @include mq($small) {
        min-height: 100vh;
        max-width: 100vw;
      }
      
      input:checked+label+& {
        right: 0;
      }

      ul {
        list-style: none;
        padding: 0;
        margin: 0;
        a {
          display: block;
          margin-left: -10px;
          padding: 10px;
          text: {
            align: right;
            transform: uppercase;
          };
          font: {
            family: var(--font--header-stack);
            weight: 400;
            size: 25px;
          };
          @include letter-spacing(75);
        }
      }
    }
  }










  @include mq($small) {
    padding: var(--base-gutter--quarter) 0;
  }
}





.section--title {
  margin: 0 0 var(--base-gutter);

  > &:last-child {
    margin-bottom: 0;
  }

  > *:not(:last-child) {
    margin-bottom: var(--base-gutter);
  }


  // &.inline--link {
    @include mq($medium-up) {
      @extend .medium-up--text-left;
      // display: flex;
      // flex-direction: wrap;
      // justify-content: space-between;
      // align-items: center;
      // margin: 0;

      // h2 {
      //   margin: 0 0 var(--base-gutter--half);
      // }

      // .text-link {
      //   margin: 0 0 var(--base-gutter--half);
      //   display: block;
      // }

      > * {
        margin: 0;
        &:not(:last-child) {
          margin-bottom: var(--base-gutter--half);
        } 
      }


    }
  // }

  // &:not(.inline--link) {
    // @include mq($medium-up) {

    //   h2 {
    //     font-size: 35px;
    //   }

    // }
  // }
}

.section--ctas {
  position: relative;
  padding: var(--base-gutter--double) 0;
  z-index: 1;

  .bg_image.main-bg {
    position: absolute;
    left: 0;
    top: 0;
    width: 100%;
    height: 100%;
    z-index: -1;
    background-repeat: no-repeat !important;
    background-size: cover !important;
    background-position: center !important;
  }

  .bg_image+.page-width {
    * {
      color: white;
    }
  }

  .grid {
    @extend .double_gutter_bottom;
    @include mq($small) {

    }
  }

  .video-inline {
    // Makes videos fit with no controls showing
    overflow: hidden;
    position: relative;

    .wrapper {
      position: relative;
      padding-bottom: 56.25%;
      padding-top: 0%;
      height: 0;

      iframe {
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        transform: none;
      }
    }
  }



  .inner-container {
    // max-width: 400px;
    margin: 0 auto;

    .icon-image {
      margin: 0 auto;
      max-width: 150px;
    }

    > * {
      margin: 0;
      &:not(:last-child) {
        margin-bottom: var(--base-gutter--quarter);
      } 
    }

    .image-content__image-container:not(.icon-image)+* {
      margin-top: var(--base-gutter--half);
    }

    h3 {
      font-size: 20px;
    }
    .rte {
      font:{
        size: 15px;
      };
    }
  }

  .btn-container {
    margin-top: var(--base-gutter--double);
  }

  @include mq($small) {
    .inner-container {
      .feature-row__image-wrapper {
        max-width: 100px;
      }
    }


  }
}





.section--two-grid {
  --left-grid: 1 / 1 / 1 / 1;
  --right-grid: 1 / 2 / 1 / 2;
  padding: 0;


  h3 {
    // font-size: 22px;
    margin-bottom: 10px;
    font-weight: 600;
  }

  h2 {
    // font-size: 32px;
    font-weight: 500;
    line-height: 1;
  }

  .rte * {
    font-size: 14px;
    line-height: 1.5;
    margin-bottom: 0;

    p {
      margin-bottom: 15px;

      &:last-of-type {
        margin-bottom: 0;
      }
    }
  }

  .btn {
    margin-top: 1.5em;
  }

  .grid_no_gutter {
    .text-block {
      padding: 2em 1em;
      // padding: 2em 0;
    }
  }


  &.hide-images {
    .image-block {
      display: none;
    }
    .text-block {

    }
  }

  @include mq($medium-up) {
    
    &.hide-images {
      .text-block {
        min-height: clamp(500px,50vw,100vh);
      }
      // grid-auto-columns: 50% 50%;
      // display: grid;
      // align-items:center;

      display: flex;
      flex-wrap: wrap;
      align-items: center;

      .grid_no_gutter {
        width: 50%;
        
        .grid__item {
          grid-area: inset !important;
          grid-column: 1 / 3 !important;
          width: 100% !important;
        }

        &:nth-of-type(odd) {
          .grid__item {
            justify-content: flex-end;
          }
          &:last-child {
            width: 100%;
            .grid__item {
              justify-content: center;
            }
          }
        }
        &:nth-of-type(even) {
          .grid__item {
            justify-content: flex-start;
          }
        }
      }
    }


    h2 {
      font-size: 65px;

    }

    .rte * {
      font-size: 24px;
    }



    .grid_no_gutter {
      grid-auto-columns: 50% 50%;
      display: grid;
      align-items: center;

      .grid__item {
        width: 100%;
      }



      .image-block {
        grid-area: var(--left-grid);
        position: relative;
        overflow: hidden;
        // padding-top:50%;
        height: 100%;
        padding-top: 80%;

        .video-ratio,
        .video-inline,
        .rimage-outer-wrapper,
        .rimage-wrapper,
        .image-content__image-container,
        .image-content__image-wrapper,
        .article__grid-image-container,
        .article__grid-image-wrapper {
          position: absolute;
          top: 0;
          left: 0;
          width: 100%;
          height: 100%;
          padding: 0 !important;
        }

        .video-ratio,
        .video-inline {
          .wrapper {
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
          }
        }

        img {
          width: 100%;
          height: 100%;
          object-fit: cover;
        }
      }

      .text-block {
        grid-area: var(--right-grid);
        padding: 4em 3em;
        display: flex;
        height: 100%;

        .text-content {
          max-width: calc(690px - 6em);
          align-self: center;
        }

        &.full-width {
          grid-area: 1 / span 2 / 1 / span 1;

          .text-content {
            max-width: 700px;
            margin: 0 auto;
          }
        }
      }

      &.reverse {
        .image-block {
          grid-area: var(--right-grid);
        }

        .text-block {
          justify-content: flex-end;
          grid-area: var(--left-grid);
        }
      }
    }
  }
}



.section--music-cta {
  position: relative;
  padding: var(--base-gutter--double) 0;
  z-index: 1;

  .grid__item {
    height: 100%;
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;
  }

  .row-container {
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: flex-start;
    height: auto;
    padding: var(--base-gutter);

    &:not(.center-image) {
      width: min(100%,350px);
      margin: 0 auto;
    }
  }
}